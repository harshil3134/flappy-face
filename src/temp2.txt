import { useEffect, useRef, useState } from "react";
import "./App.css";

function App() {
  const canvasRef = useRef(null);

  // Add state to track bird position for the HTML bird
  const [birdPos, setBirdPos] = useState({ x: 100, y: 250 });

  useEffect(() => {
    const canvas = canvasRef.current;
    const ctx = canvas.getContext("2d");

    canvas.width = 900;
    canvas.height = 600;

    let birdY = 250;
    let velocityY = 0;
    let x = 100;
    const gravity = 0.2;
    let jumpStrength = -6;

    const pipes = [];
    const pipeWidth = 60;
    const pipeGap = 180;
    const pipeSpeed = 2;
    let collisiondetection = false;
    let frameCount = 0;

    function handleKeyDown(e) {
      if (e.code === "Space" || e.key === " ") {
        console.log("key detected", e);

        velocityY = jumpStrength;
      }
    }

    function checkCollision(birdPos,pipe){

      let obj1r=birdPos.x + 35;
      let obj1l=birdPos.x;
      let obj1t=birdPos.y;
      let obj1b=birdPos.y+15;

      let obj2l=pipe.x;
      let obj2r=pipe.x+pipeWidth;
      let obj2t_top=0;
      let obj2b_top=pipe.topHeight;

      let obj2t_bottom=canvas.height-pipe.bottomHeight;
      
      if((obj1r>=obj2l)&&(obj1l<=obj2r))
      {
        console.log("obj1t-",obj1t," obj2b-top",obj2b_top," obj1b-",obj1b," obj2t-bottom",obj2t_bottom);
        
        if((pipe.type=='top'&& (obj1t<=obj2b_top)))
        {
        console.log("collision detected top ");
        collisiondetection=true;
        }
        else if((pipe.type=='bottom') && (obj1b>=obj2t_bottom))
        {
  console.log("collision detected bottom");
        collisiondetection=true;
        }
        else if((pipe.type=='both')&&((obj1t<=obj2b_top)||(obj1b>=obj2t_bottom)))
        {
  console.log("collision detected combine");
        collisiondetection=true;
        }
      }

    }
function drawPipeCap(x, y, width, isTop) {
  ctx.save();
  ctx.fillStyle = "#e0c080"; // light wood/yellow for cap
  ctx.beginPath();
  if (isTop) {
    ctx.ellipse(x + width / 2, y + 8, width / 2, 8, 0, Math.PI, 2 * Math.PI);
  } else {
    ctx.ellipse(x + width / 2, y - 8, width / 2, 8, 0, 0, Math.PI);
  }
  ctx.fill();
  ctx.restore();
}


    function generatepipe() {
      const pipe = {
        x: canvas.width,
        type: "",
        topHeight: 0,
        bottomY: 0,
        bottomHeight: 0,
      };

      const choice = ["top", "bottom", "combine"];

      const selected = choice[Math.floor(Math.random() * choice.length)];
      // let selected="combine"

      switch (selected) {
        case "top":
          pipe.type = "top";
          pipe.topHeight = Math.max(
            250,
            Math.floor(Math.random() * (canvas.height - 220))
          );
          break;
        case "bottom":
          pipe.type = "bottom";
          pipe.bottomHeight = Math.max(
            250,
            Math.floor(Math.random() * (canvas.height - 220))
          );
          break;
        case "combine":
          pipe.type = "both";
          pipe.topHeight = Math.max(
            250,
            Math.floor(Math.random() * (canvas.height - 220))
          );
          pipe.bottomHeight = canvas.height - pipe.topHeight - pipeGap;
          break;
      }
      pipes.push(pipe);
    }

    window.addEventListener("keydown", handleKeyDown);

    function draw() {
      if(collisiondetection==true)
        {return;}
      frameCount++;
     const skyGradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
skyGradient.addColorStop(0, "#223a70");   // deep blue top
skyGradient.addColorStop(0.5, "#4f8edc"); // mid blue
skyGradient.addColorStop(1, "#b3e0ff");   // light blue bottom
ctx.fillStyle = skyGradient;
ctx.fillRect(0, 0, canvas.width, canvas.height);
      ctx.fillRect(0, 0, canvas.width, canvas.height);

      // Remove the yellow square, only update birdPos for the HTML bird
      setBirdPos({ x, y: birdY });        

      // apply gravity
      velocityY += gravity;
      birdY += velocityY;

      if (birdY > canvas.height - 30) {
        birdY = canvas.height - 30;
        velocityY = 0;
      }
      if (birdY < 0) {
        birdY = 0;
        velocityY = 0;
      }

      pipes.forEach((pipe) => {
        pipe.x -= pipeSpeed;

  ctx.fillStyle = "#e0c080"; 


        if (pipe.type === "top") {
          ctx.fillRect(pipe.x, 0, pipeWidth, pipe.topHeight);
          drawPipeCap(pipe.x, pipe.topHeight, pipeWidth, false);
        } else if (pipe.type === "bottom") {
          ctx.fillRect(
            pipe.x,
            canvas.height - pipe.bottomHeight,
            pipeWidth,
            pipe.bottomHeight
          );
          drawPipeCap(pipe.x, pipe.topHeight, pipeWidth, false);
        } else if (pipe.type === "both") {
          ctx.fillRect(pipe.x, 0, pipeWidth, pipe.topHeight);
          ctx.fillRect(
            pipe.x,
            canvas.height - pipe.bottomHeight,
            pipeWidth,
            pipe.bottomHeight
          );
           drawPipeCap(pipe.x, canvas.height - pipe.bottomHeight, pipeWidth, true);
        }

checkCollision({x,y:birdY},pipe);

      });

      if (frameCount % 120 == 0) {
        generatepipe();
      }

      requestAnimationFrame(draw);
    }

    draw();

    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, []);

  return (
    <div
      className="flex flex-col items-center justify-center min-h-screen"
      style={{ position: "relative" }}
    >
      <div className="mb-8">
      
      </div>
      {/* Absolutely position the HTML/CSS bird over the canvas, following birdPos */}
      <div
        className="sky"
        style={{
          position: "absolute",
          left: 1,
          top: 110,
          width: 900,
          height: 600,
          pointerEvents: "none",
          zIndex: 2,
        }}
      >
        <div
          className="bird"
          style={{
            position: "absolute",
            left: `${birdPos.x}px`,
            top: `${birdPos.y}px`,
            width:10,
            height: 10,
           
            pointerEvents: "none",
          }}
        >
          <div className="body">
            <div className="head"></div>
            <div className="left-wing">
              <div className="left-top-wing"></div>
            </div>
            <div className="right-wing">
              <div className="right-top-wing"></div>
            </div>
            <div className="left-tail"></div>
            <div className="right-tail"></div>
          </div>
        </div>
      </div>
      <canvas
        ref={canvasRef}
        className="border-2"
        width={900}
        height={600}
        style={{ position: "relative", zIndex: 1 }}
      />
    </div>
  );
}

export default App;
